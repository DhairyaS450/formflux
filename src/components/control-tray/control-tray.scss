/* Control Tray Component Styles */

/* Base action button styling */
.action-button {
  display: flex;
  align-items: center;
  justify-content: center;
  background: #222;
  color: #fff;
  font-size: 2rem;
  line-height: 1.75rem;
  text-transform: lowercase; // All lowercase text
  cursor: pointer;
  animation: opacity-pulse 3s ease-in infinite; // Pulsing animation
  transition: background 0.2s, color 0.2s, box-shadow 0.2s;
  width: 54px;
  height: 54px;
  border-radius: 18px;
  border: none;
  box-shadow: 0 2px 8px 0 rgba(0,0,0,0.18);
  user-select: none; // Prevent text selection

  /* Focus state for accessibility */
  &:focus {
    border: 2px solid var(--Neutral-20);
    outline: 2px solid var(--Neutral-80);
  }

  /* Outlined variant */
  &.outlined {
    background: var(--Neutral-2);
    border: 1px solid var(--Neutral-20);
  }

  /* Disabled state */
  .no-action {
    pointer-events: none; // Disable interactions
  }

  /* Hover state */
  &:hover:not(:disabled) {
    background: #444;
    color: #fff;
    box-shadow: 0 4px 16px 0 rgba(0,0,0,0.22);
  }

  /* Connected state styling */
  &.connected {
    background: #1976d2;
    color: #fff;

    &:hover {
      border: 1px solid var(--Blue-500); // Blue border on hover
    }
  }
}

/* CSS custom property for volume visualization */
@property --volume {
  syntax: "length";
  inherit: false;
  initial-value: 0px;
}

/* Disabled microphone button styling */
.disabled .mic-button,
.mic-button.disabled {
  &:before {
    background: rgba(0, 0, 0, 0); // No background when disabled
  }
}

/* Microphone button specific styling */
.mic-button {
  position: relative;
  background-color: var(--accent-red); // Red background for mic
  z-index: 1;
  color: black;
  transition: all 0.2s ease-in;

  /* Focus state */
  &:focus {
    border: 2px solid var(--Neutral-20);
    outline: 2px solid var(--Red-500); // Red outline
  }

  /* Hover state */
  &:hover {
    background-color: var(--Red-400); // Lighter red on hover
  }

  /* Volume visualization ring */
  &:before {
    position: absolute;
    z-index: -1;
    top: calc(var(--volume) * -1); // Dynamic positioning
    left: calc(var(--volume) * -1);
    display: block;
    content: "";
    opacity: 0.35; // Semi-transparent
    background-color: var(--Red-500); // Red ring
    width: calc(100% + var(--volume) * 2); // Dynamic width
    height: calc(100% + var(--volume) * 2); // Dynamic height
    border-radius: 24px; // Rounded ring
    transition: all 0.02s ease-in-out; // Fast transition for real-time updates
  }
}

/* Connect/disconnect toggle button */
.connect-toggle {
  &:focus {
    border: 2px solid var(--Neutral-20);
    outline: 2px solid var(--Neutral-80);
  }

  /* Not connected state */
  &:not(.connected) {
    background: #43a047;
    color: #fff;
  }
}

.render-canvas {
  display: none;
}

/* Control tray container */
.control-tray {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 16px; /* More space between buttons */
  padding: 14px 28px;
  border-radius: 40px;
  background: rgba(30, 30, 30, 0.92); /* More opaque, darker */
  box-shadow: 0 4px 24px 0 rgba(0,0,0,0.25);
  position: relative;
  z-index: 100;
}

/* Disabled state styling */
.disabled .action-button,
.action-button.disabled {
  background: #444;
  color: #888;
  opacity: 0.6;
  cursor: not-allowed;
}

/* Connection status container */
.connection-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 4px;

  /* Connection status text */
  .text-indicator {
    font-size: 11px; // Small text
    color: var(--Blue-500); // Blue text
    user-select: none; // Prevent selection
  }

  /* Hide text when not connected */
  &:not(.connected) {
    .text-indicator {
      opacity: 0; // Invisible when not connected
    }
  }
}

/* Action buttons navigation container */
.actions-nav {
  background: var(--Neutral-5); // Light background
  border: 1px solid var(--Neutral-30); // Gray border
  border-radius: 27px; // Rounded corners
  display: inline-flex;
  gap: 12px; // Space between buttons
  align-items: center;
  overflow: clip; // Hide overflow
  padding: 10px; // Internal padding

  transition: all 0.6s ease-in; // Smooth transition

  /* Direct children styling */
  &>* {
    display: flex;
    align-items: center;
    flex-direction: column;
    gap: 1rem; // Vertical gap
  }
}

/* Pulsing animation for buttons */
@keyframes opacity-pulse {
  0% {
    opacity: 0.9; // Start at 90% opacity
  }

  50% {
    opacity: 1; // Peak at 100% opacity
  }

  100% {
    opacity: 0.9; 
  }
}

.stop-button {
  background: #e53935;
  color: #fff;
}

.stop-button:hover:not(:disabled) {
  background: #b71c1c;
}
